object Solver
	methods
		def solve(instance)

            var best <- null
            var pow <- 2.**(instance:variablesCount)
            
            pow.times({ i |
				var helpResult <- Result.new
				helpResult.init(instance)
				
				var numerator <- i
				
				instance:variablesCount.times({ j |
	                numerator.%(2).==(1).ifTrue({
		                helpResult:evaluation.add(j,true)
		            })
	                numerator <- numerator./(2)
                })

				helpResult:weight <- instance.summaryWeight(helpResult)

				var condition <- best.isNull().and(instance.isValid(helpResult))
				condition.ifTrue({
                    best <- helpResult
                    best:valid <- instance.isValid(best)
                })

				condition <- best.isNull().not()
				condition.ifTrue({
                    condition <- condition.and(instance.isValid(helpResult)).and(helpResult:weight.>(best:weight))
                }).ifFalse({
                    condition <- condition.and(instance.isValid(helpResult))
                })

				condition.ifTrue({
	                best <- helpResult
	                best:valid <- instance.isValid(best)
                })
			})
            
            best
		end
	endMethods
endClass