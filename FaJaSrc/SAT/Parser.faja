class Parser
	methods
		def parse(fileName)
            var problemInstance <- ProblemInstance.new
			var sysIO <- SystemIO.new
			var readWeight <- false
			var readClauses <- false
			var weightNumber <- 0

			var input <- sysIO.readFromFile(fileName)
			var processLine <- { line |
				var tokens <- line.split(" ")
							
				var createInstance <- {
                    problemInstance.init(tokens.get(2).toNumber(),tokens.get(3).toNumber())
                    readClauses <- true
                }
                
                var setReadWeight <- {
                    readWeight <- true
                }
                
                var createClause <- {
	                var run <- {
	                    var clause <- Clause.new
	                    clause:variables <- []

	                    var addVariable <- { token |
	                        var num <- token.toNumber()
	                        var create <- {
	                            var variable <- problemInstance:variables.get(num.abs().-(1))
	                            clause.addVariable(num.>(0),variable)
	                        }
	                        num.==(0).ifFalse(create)
	                    }
	                    tokens.each(addVariable)
	                    problemInstance:clauses.add(clause)
	                }
                    tokens.get(0).==("%").or(tokens.get(0).==("#")).ifFalse(run)
                }
                
                var createWeight <- {
                    readClauses <- false
                    var run1 <- {
	                    var variable <- problemInstance:variables.get(weightNumber)
	                    variable:weight <- tokens.get(0).toNumber()
	                    weightNumber <- weightNumber.+(1)
                    }
                    tokens.get(0).==("#").ifFalse(run1)
                }
                
                readWeight.ifTrue(createWeight)
                readClauses.ifTrue(createClause)
                tokens.get(0).==("%").ifTrue(setReadWeight)
				tokens.get(0).==("p").ifTrue(createInstance)
			}
			input.each(processLine)
            
:-)            var clause <- Clause.new
:-)            clause:variables <- []
:-)            var variable <- problemInstance:variables.get(0)
:-)            clause.addVariable(true,variable)
:-)            variable <- problemInstance:variables.get(1)
:-)            clause.addVariable(true,variable)
:-)            problemInstance:clauses.add(clause)
:-)
:-)			clause <- Clause.new
:-)			clause:variables <- []
:-)			variable <- problemInstance:variables.get(1)
:-)			clause.addVariable(false,variable)
:-)			variable <- problemInstance:variables.get(2)
:-)			clause.addVariable(true,variable)
:-)			problemInstance:clauses.add(clause)
:-)
:-)			clause <- Clause.new
:-)			clause:variables <- []
:-)			variable <- problemInstance:variables.get(0)
:-)			clause.addVariable(false,variable)
:-)			variable <- problemInstance:variables.get(2)
:-)			clause.addVariable(false,variable)
:-)			problemInstance:clauses.add(clause)
			
			problemInstance
		end
	endMethods
endClass